package com.springboot.first.app;

import java.util.ArrayList;
import java.util.List;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class StudentController {

	//@GetMapping("/student")  we can give it like this or write like below
	@GetMapping(path = "/student")
	public Student getStudent(){
		return new Student("prateek", "sharma");
		// we're returning the object here
		// but we're getting back a json
		// that is a beauty of SPRING MVC
		// as it uses JackSon library
		// to convert java objects into json and vice-versa
		// uses HTTPResponse Convertors internally
		
	}
	
	@GetMapping(path="/students")
	public List<Student> getStudents()
	{
		List<Student> students = new ArrayList<>();
		students.add(new Student("kunal", "sharma"));
		students.add(new Student("manik", "sharma"));
		students.add(new Student("dahuja", "sharma"));
		students.add(new Student("ankit", "sharma"));
		
		students.add(new Student("deshwal", "sharma"));
		return students;
	}
	
	
	// http://localhost:8080/student/prateek/sharma'
	// handle the path variable 
	// in order to bind first_name, last_name with firstName, lastName
	// we need to use @PathVariable annotation (binds incoming path variable to method arguments)
	
	@GetMapping("{first_name}/{last_name}")
	public Student studentPathVariable(@PathVariable("first_name") String firstName, @PathVariable("last_name") String lastName) {
		return new Student(firstName, lastName);
	}
	
	
	// http://localhost:8080/student/1'
	// handle the path variable 
	// in order to bind id with ID
	// we need to use @PathVariable annotation (binds incoming path variable to method arguments)
	
	@GetMapping("{id}")
	public void studentPathIDVariable(@PathVariable("id") String ID) {
		// we can get the ID here and perform the action
	}
	
}
